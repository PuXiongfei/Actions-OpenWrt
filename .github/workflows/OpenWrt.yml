#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

env:
  BUILD_DEVICE: "D2,K3,R3G"
  REPO_URL: coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: config/feeds.conf.default
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

on:
  repository_dispatch:
    types: [OpenWrt]
  workflow_dispatch:
    inputs:
      buildDevice:
        description: "build device"
        required: true
        default: "D2,K3,R3G"
      repository:
        description: "Repository name with owner."
        required: true
        default: "coolsnowwolf/lede"
      ref:
        description: "The branch, tag or SHA to checkout."
        required: true
        default: "master"
      beforeFeeds:
        description: "before update feeds scripts"
        required: true
        default: "scripts/diy-part1.sh"
      afterFeeds:
        description: "after update feeds scripts"
        required: true
        default: "scripts/diy-part2.sh"
      uploadBinDir:
        description: "upload bin dir"
        required: true
        default: "false"
      uploadFirmware:
        description: "upload firmware"
        required: true
        default: "true"
      uploadCowtransfer:
        description: "upload cowtransfer"
        required: true
        default: "false"
      uploadWetransfer:
        description: "upload wetransfer"
        required: true
        default: "false"
      uploadRelease:
        description: "upload release"
        required: true
        default: "false"

jobs:
  R3G:
    if: "contains(env.BUILD_DEVICE, 'R3G') == true || contains(github.event.inputs.buildDevice, 'R3G') == true"
    env:
      CONFIG_FILE: config/R3G.config
    runs-on: ubuntu-latest
    steps:
      - name: Env value replace
        run: |
          tempValue=${{ github.event.inputs.repository }}
          if [[ -n "$tempValue" && "$tempValue" != "$env.REPO_URL" ]]; then
            echo "replace: REPO_URL=$tempValue"
            "REPO_URL=$tempValue" >> $GITHUB_ENV
          fi
          tempValue=${{ github.event.inputs.ref }}
          if [[ -n "$tempValue" && "$tempValue" != "$env.REPO_BRANCH" ]]; then
            echo "replace: REPO_BRANCH=$tempValue"
            "REPO_BRANCH=$tempValue" >> $GITHUB_ENV
          fi
          tempValue=${{ github.event.inputs.beforeFeeds }}
          if [[ -n "$tempValue" && "$tempValue" != "$env.DIY_P1_SH" ]]; then
            echo "replace: DIY_P1_SH=$tempValue"
            "DIY_P1_SH=$tempValue" >> $GITHUB_ENV
          fi
          tempValue=${{ github.event.inputs.afterFeeds }}
          if [[ -n "$tempValue" && "$tempValue" != "$env.DIY_P2_SH" ]]; then
            echo "replace: DIY_P2_SH=$tempValue"
            "DIY_P2_SH=$tempValue" >> $GITHUB_ENV
          fi
          tempValue=${{ github.event.inputs.uploadBinDir }}
          if [[ -n "$tempValue" && "$tempValue" != "$env.UPLOAD_BIN_DIR" ]]; then
            echo "replace: UPLOAD_BIN_DIR=$tempValue"
            "UPLOAD_BIN_DIR=$tempValue" >> $GITHUB_ENV
          fi
          tempValue=${{ github.event.inputs.uploadFirmware }}
          if [[ -n "$tempValue" && "$tempValue" != "$env.UPLOAD_FIRMWARE" ]]; then
            echo "replace: UPLOAD_FIRMWARE=$tempValue"
            "UPLOAD_FIRMWARE=$tempValue" >> $GITHUB_ENV
          fi
          tempValue=${{ github.event.inputs.uploadCowtransfer }}
          if [[ -n "$tempValue" && "$tempValue" != "$env.UPLOAD_COWTRANSFER" ]]; then
            echo "replace: UPLOAD_COWTRANSFER=$tempValue"
            "UPLOAD_COWTRANSFER=$tempValue" >> $GITHUB_ENV
          fi
          tempValue=${{ github.event.inputs.uploadWetransfer }}
          if [[ -n "$tempValue" && "$tempValue" != "$env.UPLOAD_WETRANSFER" ]]; then
            echo "replace: UPLOAD_WETRANSFER=$tempValue"
            "UPLOAD_WETRANSFER=$tempValue" >> $GITHUB_ENV
          fi
          tempValue=${{ github.event.inputs.uploadRelease }}
          if [[ -n "$tempValue" && "$tempValue" != "$env.UPLOAD_RELEASE" ]]; then
            echo "replace: UPLOAD_RELEASE=$tempValue"
            "UPLOAD_RELEASE=$tempValue" >> $GITHUB_ENV
          fi

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 10240
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"

      - name: Checkout self
        uses: actions/checkout@v2

      - name: Checkout OpenWrt Repository
        uses: actions/checkout@v2
        with:
          path: openwrt
          repository: ${{ env.REPO_URL }}
          ref: ${{ env.REPO_BRANCH }}

      - name: Initialization environment
        run: |
          echo "Free space:"
          df -hT
          sudo timedatectl set-timezone "$TZ"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(cat config/depends-ubuntu.config)

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to cowtransfer
        id: cowtransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 2

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
